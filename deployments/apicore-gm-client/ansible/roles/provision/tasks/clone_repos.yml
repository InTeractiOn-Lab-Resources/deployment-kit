---
# =====================================
# ROL: PROVISION - CLONAR REPOSITORIOS
# Descripción: Clona repositorios y construye imágenes Docker localmente
# =====================================

# Crear directorio del proyecto si no existe
- name: Asegurar que existe el directorio del proyecto
  file:
    path: "{{ project_root }}"
    state: directory
    owner: "{{ ansible_user_id | default('ubuntu') }}"
    group: "{{ ansible_user_id | default('ubuntu') }}"
    mode: '0755'

# Extraer información de repositorios desde la definición de servicios
- name: Extraer información de repositorios desde servicios
  set_fact:
    effective_repos: "{{ service_repos | default([]) }}"
  tags:
    - provision
    - clone

# Mostrar información de los repositorios que se clonarán
- name: Mostrar información de los repositorios
  debug:
    msg: "Se procesarán {{ effective_repos | length }} repositorios: {{ effective_repos | map(attribute='name') | list }}"
  tags:
    - provision
    - clone

# Verificar que hay repositorios para clonar
- name: Verificar que hay repositorios para clonar
  fail:
    msg: "No hay repositorios definidos para clonar. Asegúrate de definir service_repos en tu playbook cuando clone_repos es true."
  when: effective_repos | length == 0
  tags:
    - provision
    - clone

# Clonar o actualizar repositorios
- name: Procesar repositorios de servicios
  block:
    # Verificar si el repositorio ya existe
    - name: Verificar si el repositorio ya está clonado
      stat:
        path: "{{ project_root }}/{{ item.name }}/.git"
      register: repo_stat
      loop: "{{ effective_repos }}"
      loop_control:
        label: "{{ item.name }}"

    # Mostrar estado de los repositorios (para depuración)
    - name: Mostrar estado de los repositorios
      debug:
        msg: "Repositorio {{ item.item.name }}: {{ 'ya existe' if item.stat.exists else 'no existe' }}"
      loop: "{{ repo_stat.results }}"
      loop_control:
        label: "{{ item.item.name }}"
      verbosity: 1

    # Clonar repositorio si no existe
    - name: Clonar repositorios que no existen
      git:
        repo: "{{ item.item.url }}"
        dest: "{{ project_root }}/{{ item.item.name }}"
        version: "{{ item.item.branch | default('main') }}"
      when: not item.stat.exists
      loop: "{{ repo_stat.results }}"
      loop_control:
        label: "{{ item.item.name }}"
      register: clone_result

    # Actualizar repositorio si ya existe
    - name: Actualizar repositorios existentes
      git:
        repo: "{{ item.item.url }}"
        dest: "{{ project_root }}/{{ item.item.name }}"
        version: "{{ item.item.branch | default('main') }}"
        update: yes
        force: yes
      when: item.stat.exists
      loop: "{{ repo_stat.results }}"
      loop_control:
        label: "{{ item.item.name }}"
      register: update_result
  tags:
    - provision
    - clone

# Copiar el docker-compose.yml existente
- name: Copiar docker-compose.yml existente
  copy:
    src: "{{ local_files_dir }}/docker-compose.yml"
    dest: "{{ project_root }}/docker-compose.yml"
    owner: "{{ ansible_user_id | default('ubuntu') }}"
    group: "{{ ansible_user_id | default('ubuntu') }}"
    mode: '0644'
  tags:
    - provision
    - clone
    - docker

# Copiar archivos adicionales
- name: Copiar archivos adicionales si existen
  copy:
    src: "{{ local_files_dir }}/{{ item }}"
    dest: "{{ project_root }}/{{ item }}"
    owner: "{{ ansible_user_id | default('ubuntu') }}"
    group: "{{ ansible_user_id | default('ubuntu') }}"
    mode: '0644'
  loop: "{{ additional_files | default([]) }}"
  ignore_errors: yes  # Continuar si algún archivo no existe
  tags:
    - provision
    - clone
    - docker

# Crear archivo .env con rutas locales y variables de entorno
- name: Crear archivo .env con rutas locales
  template:
    dest: "{{ project_root }}/.env"
    content: |
      # Rutas a los repositorios locales
      {% for repo in effective_repos %}
      {{ repo.env_var | default(repo.name | upper + '_PATH') }}={{ project_root }}/{{ repo.name }}
      {% endfor %}
      
      # Variables globales para bases de datos y configuración
      {% for key, value in global_env_vars.items() %}
      {{ key }}={{ value }}
      {% endfor %}
      
      # Variables específicas por servicio
      {% for service in services %}
      {% if service.env_vars is defined %}
      # {{ service.name | capitalize }} Variables
      {% for key, value in service.env_vars.items() %}
      {{ key }}={{ value }}
      {% endfor %}
      {% endif %}
      {% endfor %}
    owner: "{{ ansible_user_id | default('ubuntu') }}"
    group: "{{ ansible_user_id | default('ubuntu') }}"
    mode: '0644'
  tags:
    - provision
    - clone
    - docker

# Determinar si se requiere reconstruir imágenes
- name: Determinar si se requiere build
  set_fact:
    repos_updated: >-
      {{ (clone_result.results | default([]) | selectattr('changed', 'equalto', true) | list | length > 0)
         or (update_result.results | default([]) | selectattr('changed', 'equalto', true) | list | length > 0) }}
  tags:
    - provision
    - clone

# Mostrar información sobre si se necesita reconstruir imágenes
- name: Información sobre construcción de imágenes
  debug:
    msg: "{{ 'Se reconstruirán las imágenes debido a cambios en los repositorios' if repos_updated else 'No hay cambios en los repositorios, pero puede forzar la reconstrucción con force_build' }}"
  tags:
    - provision
    - clone

# Construir imágenes si hubo cambios o se fuerza el build
- name: Construir imágenes Docker
  command: docker compose build
  args:
    chdir: "{{ project_root }}"
  when: repos_updated | default(true) or force_build | default(false)
  tags:
    - provision
    - clone
    - docker

# Levantar los contenedores con las imágenes construidas localmente
- name: Levantar contenedores con Docker Compose
  command: docker compose up -d
  args:
    chdir: "{{ project_root }}"
  changed_when: true
  tags:
    - provision
    - docker
