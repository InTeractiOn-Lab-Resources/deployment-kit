---
# =====================================
# ROL: PROVISION - IMÁGENES PRECONSTRUIDAS
# Descripción: Descarga imágenes Docker preconstruidas y configura el despliegue
# =====================================

# Crear directorio de docker-compose si no existe
- name: Asegurar que existe el directorio para docker-compose
  file:
    path: "{{ compose_path }}"
    state: directory
    owner: "{{ ansible_user_id | default('ubuntu') }}"
    group: "{{ ansible_user_id | default('ubuntu') }}"
    mode: '0755'

# Descargar imágenes Docker desde el registro (Docker Hub u otro)
- name: Descargar imágenes Docker preconstruidas
  command: docker pull {{ item }}
  loop:
    - "{{ docker_registry | default('') }}{{ service1_image }}:{{ service1_tag | default('latest') }}"
    - "{{ docker_registry | default('') }}{{ service2_image }}:{{ service2_tag | default('latest') }}"
    - "{{ docker_registry | default('') }}{{ service3_image }}:{{ service3_tag | default('latest') }}"
  changed_when: true
  failed_when: false
  when: not clone_repos | default(false)

# OPCIÓN 1: Copiar docker-compose y archivos adicionales desde el repositorio local
- name: Copiar docker-compose.yml desde el repositorio local
  copy:
    src: "{{ local_files_dir | default(playbook_dir + '/../files') }}/docker-compose.yml"
    dest: "{{ compose_path }}/docker-compose.yml"
    owner: "{{ ansible_user_id | default('ubuntu') }}"
    group: "{{ ansible_user_id | default('ubuntu') }}"
    mode: '0644'
  when: not clone_repos | default(false) and use_local_files | default(true)

# Copiar archivos adicionales (SQL, configuración, etc.)
- name: Copiar archivos adicionales si existen
  copy:
    src: "{{ local_files_dir | default(playbook_dir + '/../files') }}/{{ item }}"
    dest: "{{ compose_path }}/{{ item }}"
    owner: "{{ ansible_user_id | default('ubuntu') }}"
    group: "{{ ansible_user_id | default('ubuntu') }}"
    mode: '0644'
  loop: "{{ additional_files | default(['init.sql']) }}"
  when: not clone_repos | default(false) and use_local_files | default(true)
  ignore_errors: yes  # Continuar si algún archivo no existe

# OPCIÓN 2: Clonar repositorio de configuración
- name: Clonar repositorio de configuración
  git:
    repo: "{{ config_repo_url }}"
    dest: "{{ project_root }}/{{ config_repo_name | default('config') }}"
    version: "{{ config_repo_branch | default('main') }}"
  when: not clone_repos | default(false) and not use_local_files | default(true) and config_repo_url is defined and config_repo_url != ""

# Copiar docker-compose desde el repositorio clonado
- name: Copiar docker-compose.yml desde el repositorio clonado
  copy:
    src: "{{ project_root }}/{{ config_repo_name | default('config') }}/{{ config_files_dir | default('') }}docker-compose.yml"
    dest: "{{ compose_path }}/docker-compose.yml"
    remote_src: yes
    owner: "{{ ansible_user_id | default('ubuntu') }}"
    group: "{{ ansible_user_id | default('ubuntu') }}"
    mode: '0644'
  when: not clone_repos | default(false) and not use_local_files | default(true) and config_repo_url is defined and config_repo_url != ""

# Crear archivo .env con las variables necesarias para docker-compose
- name: Crear archivo .env con rutas necesarias
  copy:
    dest: "{{ compose_path }}/.env"
    content: |
      # Variables para las imágenes de servicios (formato estándar, cambiar variables según sea necesario)
      API_CORE_IMAGE={{ docker_registry | default('') }}{{ service1_image }}:{{ service1_tag | default('latest') }}
      API_GM_IMAGE={{ docker_registry | default('') }}{{ service2_image }}:{{ service2_tag | default('latest') }}
      CLIENT_IMAGE={{ docker_registry | default('') }}{{ service3_image }}:{{ service3_tag | default('latest') }}
      
      # Variables adicionales (bases de datos, configuración, etc.)
      {{ additional_env_vars | default('') }}
    owner: "{{ ansible_user_id | default('ubuntu') }}"
    group: "{{ ansible_user_id | default('ubuntu') }}"
    mode: '0644'
  when: not clone_repos | default(false)

# Levantar los contenedores
- name: Levantar contenedores con Docker Compose
  command: docker compose up -d
  args:
    chdir: "{{ compose_path }}"
  changed_when: true
