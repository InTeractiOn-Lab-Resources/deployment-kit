---
# =====================================
# PLAYBOOK: DESPLIEGUE EN LA NUBE (CONFIGURACIÓN PARA clone_repos: false)
# Descripción: Configura una instancia en la nube (con GitHub Actions) para desplegar la aplicación
#              Despliega usando imágenes preconstruidas en Docker Hub.
# =====================================

- name: Despliegue en la nube 
  hosts: all
  become: true
  
  vars:
    # CONFIGURACIÓN BÁSICA DEL PROYECTO
    # ----------------------------------
    # Nombre del proyecto
    project_name: "apicore-gm-client"

    # Usuario remoto (pasado desde el workflow)
    remote_user: "{{ remote_user | default('root') }}"
  
    # Directorio raíz del proyecto (se ajusta automáticamente según el usuario)
    project_root: "{{ '/home/' + remote_user if remote_user != 'root' else '/root' }}/{{ project_name }}"
    
    # Modo de despliegue (false = usar imágenes preconstruidas [RECOMENDADO], true = clonar y construir)
    clone_repos: false

    # Variables para localizar archivos
    workspace_root: "{{ workspace_root }}"
    deployment_dir: "{{ deployment_dir }}"

    # Determina si el proyecto utiliza un archivo .env para el docker compose
    use_env_file: true
    
    # Directorio local donde están los archivos a copiar (docker-compose.yml y otros archivos adicionales)
    local_files_dir: "{{ workspace_root }}/{{ deployment_dir }}"
    
    # Archivos adicionales a copiar
    additional_files:
      - "init.sql"
    
    # CONFIGURACIÓN DE SERVICIOS
    # --------------------------
    # Prefijo común para las imágenes Docker
    docker_registry: ""
    
    # Definición de servicios
    services:
      - name: "core"
        type: "api"
        image: "thecariah/api-core-test"
        tag: "latest"
        port: 3001
        env_var: "API_CORE_IMAGE"
        api_prefix: "api-core"
      
      - name: "gm"
        type: "api"
        image: "thecariah/api-gm-test"
        tag: "latest"
        port: 3002
        env_var: "API_GM_IMAGE"
        api_prefix: "api-gm"
      
      - name: "client"
        type: "frontend"
        image: "thecariah/client-test"
        tag: "latest"
        port: 3000
        env_var: "CLIENT_IMAGE"
        frontend_prefix: "/"

    # Variables globales de entorno para todos los servicios (inyectadas desde GitHub Secrets)
    global_env_vars:
      POSTGRES_DB: "{{ postgres_db }}"
      POSTGRES_USER: "{{ postgres_user }}"
      POSTGRES_PASSWORD: "{{ postgres_password }}"
      MONGO_USERNAME: "{{ mongo_username }}"
      MONGO_PASSWORD: "{{ mongo_password }}"
      INIT_SQL_PATH: "{{ project_root }}/init.sql"
    
    # CONFIGURACIÓN DE NGINX
    # ---------------------    
    # Nombre del servidor (dominio o "_" para local)
    server_name: "_"
    
    # Para SSL (enable_ssl: true -> con dominio, enable_ssl: false -> sin dominio)
    enable_ssl: false
    # admin_email: "carolina.antillanca@usach.cl"
    # ssl_cert_path: "/etc/letsencrypt/live/{{ server_name }}/fullchain.pem"
    # ssl_key_path: "/etc/letsencrypt/live/{{ server_name }}/privkey.pem"

  roles:
    - python
    - docker
    - { role: ssl, when: "enable_ssl | bool" }
    - nginx
    - provision
