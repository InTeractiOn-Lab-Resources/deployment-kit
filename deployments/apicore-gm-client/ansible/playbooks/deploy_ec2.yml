---
# =====================================
# PLAYBOOK: DESPLIEGUE EN AWS
# Descripción: Configura una instancia EC2 de AWS para ejecutar la aplicación
# =====================================

- name: Despliegue en instancia EC2 AWS
  hosts: all
  become: true
  
  vars:
    # CONFIGURACIÓN BÁSICA DEL PROYECTO
    # ----------------------------------
    # Nombre del proyecto
    project_name: "apicore-gm-client"
    
    # Directorio raíz del proyecto
    project_root: "/home/ubuntu/{{ project_name }}"
    
    # Modo de despliegue (false = usar imágenes preconstruidas [RECOMENDADO], true = clonar y construir)
    clone_repos: false

    # Variables para localizar archivos (pasadas desde el workflow)
    workspace_root: "{{ workspace_root | default(playbook_dir + '/../../..') }}"
    deployment_dir: "{{ deployment_dir | default('deployments/apicore-gm-client') }}"
    
    # Directorio local donde están los archivos a copiar (docker-compose.yml y otros archivos necesarios)
    local_files_dir: "{{ workspace_root }}/{{ deployment_dir }}"
    
    # Archivos adicionales a copiar
    additional_files:
      - "init.sql"
    
    # CONFIGURACIÓN DE SERVICIOS
    # --------------------------
    # Prefijo común para las imágenes Docker (si se deja vacío se asume Docker Hub)
    docker_registry: ""
    
    # Definición de servicios
    services:
      - name: "core"                     # Nombre interno del servicio
        type: "api"                      # Tipo: api o frontend
        image: "thecariah/api-core-test" # Imagen Docker
        tag: "latest"                    # Tag de la imagen
        port: 3001                       # Puerto en el host
        env_var: "API_CORE_IMAGE"        # Nombre de variable para el .env
        api_prefix: "api-core"           # Prefijo para la ruta de API en Nginx
      
      - name: "gm"
        type: "api"
        image: "thecariah/api-gm-test"
        tag: "latest"
        port: 3002
        env_var: "API_GM_IMAGE"
        api_prefix: "api-gm"
      
      - name: "client"
        type: "frontend"
        image: "thecariah/client-test"
        tag: "latest"
        port: 3000
        env_var: "CLIENT_IMAGE"
      
      # Para añadir un nuevo servicio, agrega un bloque similar al siguiente:
      # - name: "nuevo_servicio"
      #   type: "api"
      #   image: "nueva/imagen"
      #   tag: "v1"
      #   port: 3003
      #   env_var: "NUEVO_SERVICIO_IMAGE"
      #   api_prefix: "nuevo-api"

    # Variables globales de entorno para todos los servicios (inyectadas desde GitHub Secrets)
    global_env_vars:
      POSTGRES_DB: "{{ postgres_db }}"
      POSTGRES_USER: "{{ postgres_user }}"
      POSTGRES_PASSWORD: "{{ postgres_password }}"
      MONGO_USERNAME: "{{ mongo_username }}"
      MONGO_PASSWORD: "{{ mongo_password }}"
      INIT_SQL_PATH: "{{ project_root }}/init.sql"
    
    # CONFIGURACIÓN DE NGINX
    # ---------------------    
    # Nombre del servidor (dominio o "_" para local)
    server_name: "cantillantest.duckdns.org"
    
    # Para SSL (opcional, solo si tienes dominio)
    enable_ssl: true
    admin_email: "carolina.antillanca@usach.cl"
    ssl_cert_path: "/etc/letsencrypt/live/{{ server_name }}/fullchain.pem"
    ssl_key_path: "/etc/letsencrypt/live/{{ server_name }}/privkey.pem"
    
  roles:
    - python
    - docker
    - { role: ssl, when: "enable_ssl | bool" }
    - nginx
    - provision

# INSTRUCCIONES:
#
# 1. CÓMO AÑADIR UN NUEVO SERVICIO:
#    Copia uno de los bloques de servicio existentes y modifica sus valores.
#    Ejemplo:
#
#    - name: "nuevo-servicio"          # Nombre único del servicio
#      type: "api"                     # Tipo: api o frontend
#      image: "usuario/nueva-imagen"   # Imagen Docker
#      tag: "latest"                   # Tag de la imagen
#      port: 3003                      # Puerto en el host
#      container_port: 3003            # Puerto dentro del contenedor (opcional)
#      env_var: "NUEVO_SERVICIO_IMAGE" # Nombre de variable en el .env
#      api_prefix: "nuevo-api"         # Ruta de API en Nginx (solo si es tipo api, si es frontend, no es necesario)
#      env_vars:                       # Variables de entorno específicas (opcional)
#        VARIABLE1: "valor1"
#        VARIABLE2: "valor2"
#
# 2. VARIABLES DE ENTORNO:
#    - Específicas de un servicio: Añádelas dentro de env_vars en el servicio
#    - Globales para todos: Añádelas en global_env_vars
#
# 3. CONFIGURACIÓN DE NGINX:
#    - Los servicios tipo "api" generan automáticamente una ruta en Nginx usando api_prefix
#    - Un único servicio tipo "frontend" será accesible en la ruta raíz (/)
#
# 4. SECRETOS EN GITHUB ACTIONS PARA BASES DE DATOS:
#    Ajusta los nombres según tu configuración, este es un ejemplo:
#    - POSTGRES_USER: Usuario para PostgreSQL
#    - POSTGRES_PASSWORD: Contraseña para PostgreSQL
#    - POSTGRES_DB: Nombre de la base de datos PostgreSQL
