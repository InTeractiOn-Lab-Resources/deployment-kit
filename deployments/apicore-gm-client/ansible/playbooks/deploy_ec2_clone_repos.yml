---
# =====================================
# PLAYBOOK: DESPLIEGUE EN AWS (CONFIGURACIÓN PARA clone_repos: true)
# Descripción: Configura una instancia EC2 de AWS (con GitHub Actions) para ejecutar la aplicación
#              Despliega en modo "clone_repos" = true, es decir, clona los repositorios y construye las imágenes localmente.
# =====================================

- name: Despliegue en instancia EC2 AWS
  hosts: all
  become: true
  
  vars:
    # CONFIGURACIÓN BÁSICA DEL PROYECTO
    # ----------------------------------
    # Nombre del proyecto
    project_name: "apicore-gm-client"
    
    # Directorio raíz del proyecto
    project_root: "/home/ubuntu/{{ project_name }}"
    
    # Modo de despliegue (false = usar imágenes preconstruidas [RECOMENDADO], true = clonar y construir)
    clone_repos: true

    # Variables para localizar archivos (pasadas desde el workflow)
    workspace_root: "{{ workspace_root | default(playbook_dir + '/../../..') }}"
    deployment_dir: "{{ deployment_dir | default('deployments/apicore-gm-client') }}"
    
    # Directorio local donde están los archivos a copiar (docker-compose.yml y otros archivos necesarios)
    local_files_dir: "{{ workspace_root }}/{{ deployment_dir }}"
    
    # Archivos adicionales a copiar
    additional_files:
      - "init.sql"
    
    # CONFIGURACIÓN DE SERVICIOS
    # --------------------------
    
    # Definición de servicios (necesario para ambos modos de despliegue)
    services:
      - name: "core"
        type: "api"
        port: 3001
        api_prefix: "api-core"
      
      - name: "gm"
        type: "api"
        port: 3002
        api_prefix: "api-gm"
      
      - name: "client"
        type: "frontend"
        port: 3000
    
    # Repositorios a clonar (solo necesario cuando clone_repos: true)
    service_repos:
      - name: "api-core"  # Nombre de la carpeta donde se clonará
        url: "https://github.com/infra-sandbox/api-core-test.git"
        branch: "main"
        env_var: "API_CORE_PATH"
        service: "core"  # Debe coincidir con un servicio en la sección 'services'
      
      - name: "api-gm"
        url: "https://github.com/infra-sandbox/api-gm-test.git"
        branch: "main"
        env_var: "API_GM_PATH"
        service: "gm"
      
      - name: "client"
        url: "https://github.com/infra-sandbox/client-test.git"
        branch: "main"
        env_var: "CLIENT_PATH"
        service: "client"

    # Variables globales de entorno para todos los servicios (inyectadas desde GitHub Secrets)
    global_env_vars:
      POSTGRES_DB: "{{ postgres_db }}"
      POSTGRES_USER: "{{ postgres_user }}"
      POSTGRES_PASSWORD: "{{ postgres_password }}"
      MONGO_USERNAME: "{{ mongo_username }}"
      MONGO_PASSWORD: "{{ mongo_password }}"
      INIT_SQL_PATH: "{{ project_root }}/init.sql"
    
    # CONFIGURACIÓN DE NGINX
    # ---------------------    
    # Nombre del servidor (dominio o "_" para local)
    server_name: "_"
    
    # Para SSL (opcional, solo si tienes dominio)
    enable_ssl: false
    # admin_email: "carolina.antillanca@usach.cl"
    # ssl_cert_path: "/etc/letsencrypt/live/{{ server_name }}/fullchain.pem"
    # ssl_key_path: "/etc/letsencrypt/live/{{ server_name }}/privkey.pem"
    
  roles:
    - python
    - docker
    - { role: ssl, when: "enable_ssl | bool" }
    - nginx
    - provision

# INSTRUCCIONES:
#
# 1. MODO DE DESPLIEGUE:
#    a. MODO CON IMÁGENES PRECONSTRUIDAS EN DOCKER HUB:
#       - Define clone_repos: false
#       - Define 'services' con los campos 'name', 'type', 'image', 'tag', 'port', 'env_var' y 'api_prefix'
#
#    b. MODO CON CLONACIÓN DE REPOSITORIOS:
#       - Define clone_repos: true
#       - Define 'services' con los campos 'name', 'type' y 'port'
#       - Define 'service_repos' con los campos 'name', 'url', 'branch', 'env_var' y 'service'
#
#       * IMPORTANTE: El campo 'service' debe coincidir con el campo 'name' en la sección 'services'
#
# 2. CÓMO AÑADIR UN NUEVO SERVICIO:
#    Copia uno de los bloques de servicio existentes y modifica sus valores.
#
#    Ejemplo (clone_repos: false):
#
#    - name: "nuevo-servicio"          # Nombre único del servicio
#      type: "api"                     # Tipo: api o frontend
#      image: "usuario/nueva-imagen"   # Imagen Docker
#      tag: "latest"                   # Tag de la imagen
#      port: 3003                      # Puerto en el host
#      container_port: 3003            # Puerto dentro del contenedor (opcional)
#      env_var: "NUEVO_SERVICIO_IMAGE" # Nombre de variable en el .env (debe coincidir con el nombre en docker-compose.yml)
#      api_prefix: "nuevo-api"         # Ruta de API en Nginx (solo si es tipo api, si es frontend, no es necesario)
#      env_vars:                       # Variables de entorno específicas (opcional)
#        VARIABLE1: "valor1"
#        VARIABLE2: "valor2"
#
#   Ejemplo (clone_repos: true):
#   Se requiere definir el servicio en 'services' y en 'service_repos', pero en este caso no se usa 'image' ni 'tag'.
#
#   services:
#   - name: "nuevo-servicio"          # Nombre único del servicio
#     type: "api"                     # Tipo: api o frontend
#     port: 3003                      # Puerto en el host
#
#   service_repos:
#     - name: "nuevo-servicio"                              # Nombre de la carpeta donde se clonará
#       url: "https://github.com/mi-organizacion/app.git"   # URL del repositorio
#       branch: "main"                                      # Rama a clonar
#       env_var: "NUEVO_SERVICIO_PATH"                      # Variable de entorno (debe coincidir con el nombre en docker-compose.yml)
#       service: "nuevo-servicio"                           # Debe coincidir con un servicio en la sección 'services'
#   
# 3. VARIABLES DE ENTORNO (se inyectarán en el archivo .env):
#    - Específicas de un servicio: Añádelas dentro de env_vars en el servicio
#    - Globales para todos: Añádelas en global_env_vars
#    - Puedes usar secretos de GitHub Actions para estas variables.
#
# 4. CONFIGURACIÓN DE NGINX:
#    - Los servicios tipo "api" generan automáticamente una ruta en Nginx usando api_prefix
#    - Un único servicio tipo "frontend" será accesible en la ruta raíz (/)
#
# 5. SECRETOS EN GITHUB ACTIONS PARA BASES DE DATOS:
#    Ajusta los nombres según tu configuración, este es un ejemplo:
#    - POSTGRES_USER: Usuario para PostgreSQL
#    - POSTGRES_PASSWORD: Contraseña para PostgreSQL
#    - POSTGRES_DB: Nombre de la base de datos PostgreSQL
