---
# =====================================
# PLAYBOOK: DESPLIEGUE EN VM DIINF PARA PRODUCCIÓN
# Descripción: Configura una máquina para desplegar Neurone Trivia
#              Despliega usando imágenes preconstruidas en Docker Hub.
# =====================================

- name: Despliegue de Neurone Trivia en VM del DIINF
  hosts: local
  become: true
  
  vars:
    # CONFIGURACIÓN BÁSICA DEL PROYECTO
    # ----------------------------------
    # Nombre del proyecto
    project_name: "Trivia"
    
    # Directorio raíz del proyecto (se ejecuta desde el directorio raíz)
    project_root: "{{ playbook_dir | dirname | dirname }}"
    
    # Modo de despliegue (false = usar imágenes preconstruidas [RECOMENDADO], true = clonar y construir)
    clone_repos: false

    # Ruta a docker-compose.yml y .env (deben ya existir)
    docker_compose_path: "{{ project_root }}/docker-compose.yml"
    env_file_path: "{{ project_root }}/.env"

    # Determina si el proyecto utiliza un archivo .env para el docker compose
    use_env_file: true
    
    # CONFIGURACIÓN DE SERVICIOS
    # --------------------------
    # Prefijo común para las imágenes Docker (para Docker Hub dejar vacío)
    docker_registry: ""
    
    # Definición de servicios
    services:
      # NEURONE-Trivia Services
      - name: "trivia-client"
        type: "frontend"
        image: "triviainteraction/neurone"
        tag: "game-client"
        port: 4200
        frontend_prefix: "/"

      - name: "trivia-server"
        type: "api"
        image: "triviainteraction/neurone"
        tag: "game-server"
        port: 3030
        api_prefix: "api"

      # NEURONE-GM Services
      - name: "gm-client"
        type: "frontend"
        image: "triviainteraction/neurone"
        tag: "gm-client"
        port: 4201
        # Sin frontend_prefix (acceso directo por puerto 4201)

      - name: "gm-server"
        type: "api"
        image: "triviainteraction/neurone"
        tag: "gm-server"
        port: 3080
        api_prefix: "gm-api"
        
      # NEURONE-Core Service
      - name: "neurone-core"
        type: "api"
        image: "triviainteraction/neurone"
        tag: "core"
        port: 3000
        api_prefix: "neurone-api"
      
    # Clonar y construir directamente en la VM es un proceso lento y propenso a errores.
    # La VM de Bogano tiene problemas de conexión por lo que se debe usar imágenes preconstruidas.

    # Repositorios a clonar (NO SE USA CON clone_repos: false)
    #   - name: "game"
    #     url: "https://github.com/NEURONE-IL/GAME.git"
    #     branch: "deploy-diinf"
    #     service: "trivia-server"
    #     
    #   - name: "neurone-gm"
    #     url: "https://github.com/NEURONE-IL/NEURONE-GM.git"
    #     branch: "deploy-diinf"
    #     service: "gm-server"
    #     
    #   - name: "neurone"
    #     url: "https://github.com/NEURONE-IL/neurone.git"
    #     branch: "deploy-diinf"
    #     service: "neurone-core"
    
    # CONFIGURACIÓN DE NGINX
    # ---------------------    
    # Nombre del servidor (dominio de la VM o "_" para local)
    server_name: "bogano.diinf.usach.cl"

    # Controla si las rutas definidas en Nginx deben terminar con una barra "/".
    # true  ➝ Nginx agregará "/" al final del proxy_pass (ej: proxy_pass http://localhost:3000/).
    # false ➝ Nginx no agregará "/" al final (ej: proxy_pass http://localhost:3000).
    use_trailing_slash: false
    
    # Para SSL (enable_ssl: true -> si hay dominio, enable_ssl: false -> sin dominio / local)
    enable_ssl: true
    admin_email: "triviainteraction@gmail.com"
    ssl_cert_path: "/etc/letsencrypt/live/{{ server_name }}/fullchain.pem"
    ssl_key_path: "/etc/letsencrypt/live/{{ server_name }}/privkey.pem"
    
    # CONFIGURACION POST-DEPLOYMENT (Exclusivo NEURONE Trivia)
    # ------------------------------
    # Usuario administrador que se creará automáticamente después del despliegue
    admin_username: "interaction"
    admin_email: "triviainteraction@gmail.com"
    admin_password: "interaction.2025"
    
  roles:
    - firewall
    - python
    - docker
    - { role: ssl, when: "enable_ssl | bool" }
    - nginx
    - provision
    - post-deployment
