# ========================================================
# WORKFLOW PARA DESPLIEGUE AUTOMATIZADO EN AWS
# Descripción: Crea infraestructura en AWS y despliega aplicaciones
# ========================================================
name: Despliegue AWS APICore-GM-Client

on:
  workflow_dispatch:  # Se ejecuta manualmente desde GitHub
    inputs:
      deployment_dir:
        description: 'Directorio principal de despliegue'
        required: true
        default: 'deployments/apicore-gm-client'

jobs:
  # TRABAJO 1: CREAR INFRAESTRUCTURA CON TERRAFORM
  create-infrastructure:
    name: Crear Infraestructura AWS
    runs-on: ubuntu-latest

    # Variables de entorno necesarias
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_VAR_inline_public_key: ${{ secrets.INLINE_PUBLIC_KEY }}

    # Directorio donde está la configuración de Terraform
    defaults:
      run:
        working-directory: ${{ github.event.inputs.deployment_dir }}/terraform/aws

    # Valores que se pasarán al siguiente job
    outputs:
      instance_ip: ${{ steps.extract.outputs.instance_ip }}

    steps:
      # Paso 1: Obtener el código
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Paso 2: Configurar Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      # Paso 3: Inicializar Terraform
      - name: Terraform Init
        run: terraform init

      # Paso 4: Validar la configuración
      - name: Terraform Validate
        run: terraform validate

      # Paso 5: Crear un plan
      - name: Terraform Plan
        run: terraform plan

      # Paso 6: Aplicar configuración (crear recursos)
      - name: Terraform Apply
        run: terraform apply -auto-approve

      # Paso 7: Obtener IP de la instancia creada
      - name: Extract Public IP
        id: extract
        run: |
          echo "instance_ip=$(terraform output -raw instance_public_ip)" >> $GITHUB_OUTPUT

  # TRABAJO 2: CONFIGURAR LA INSTANCIA CON ANSIBLE
  provision-instance:
    name: Configurar Instancia con Ansible
    needs: create-infrastructure
    runs-on: ubuntu-latest

    env:
      # Usuario SSH para la instancia (Digital Ocean: root, AWS: ubuntu)
      SSH_USER: ubuntu
      ANSIBLE_ROLES_PATH: roles

    steps:
      # Paso 1: Instalar Ansible
      - name: Install Ansible
        run: sudo apt-get update && sudo apt-get install -y ansible

      # Instalar herramientas de monitoreo
      - name: Install Monitoring Tools
        run: sudo apt-get update && sudo apt-get install -y sysstat

      # Paso 2: Obtener el código
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Paso 3: Preparar clave SSH para conexión
      - name: Write SSH Private Key
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem

      # Paso 4: Ejecutar Ansible para configurar la instancia
      - name: Run Ansible Playbook
        run: |
          cd ${{ github.event.inputs.deployment_dir }}/ansible 
          
          # Crear archivo de variables dinámicamente
          cat > vars.yml << EOF
          ---
          workspace_root: ${{ github.workspace }}
          deployment_dir: ${{ github.event.inputs.deployment_dir }}

          # Usuario remoto para determinar la ruta del proyecto
          remote_user: ${{ env.SSH_USER }}
          
          # Variables de base de datos (Modificar según tus secretos)
          postgres_user: ${{ secrets.POSTGRES_USER }}
          postgres_password: ${{ secrets.POSTGRES_PASSWORD }}
          postgres_db: ${{ secrets.POSTGRES_DB }}
          mongo_username: ${{ secrets.MONGO_USERNAME }}
          mongo_password: ${{ secrets.MONGO_PASSWORD }}
          EOF

          # Monitorear CPU y memoria
          pidstat -u -r -h -p ALL 1 > pidstat.log &
          PIDSTAT_PID=$!
          
          # Monitorear disco antes
          DISK_BEFORE=$(df -m / | tail -n 1 | awk '{print $3}')
          
          # Ejecutar Ansible con el archivo de variables
          ansible-playbook playbooks/deploy_cloud.yml \
            -i "${{ needs.create-infrastructure.outputs.instance_ip }}," \
            --user ${{ env.SSH_USER }} \
            --private-key ${{ github.workspace }}/private_key.pem \
            --ssh-extra-args "-o StrictHostKeyChecking=no" \
            -e @vars.yml
            
          # Detener monitoreo de CPU y memoria
          kill $PIDSTAT_PID
          
          # Monitorear disco después
          DISK_AFTER=$(df -m / | tail -n 1 | awk '{print $3}')
          DISK_USAGE=$((DISK_AFTER - DISK_BEFORE))
          
          # Extraer métricas
          CPU_USAGE=$(awk '/Average/ {print $7}' pidstat.log | tail -n 1)
          MEM_USAGE=$(awk '/Average/ {print $8}' pidstat.log | tail -n 1)
          
          # Guardar métricas
          echo "CPU Total (%): $CPU_USAGE" >> ~/apicore-gm-client/metrics.log
          echo "Memoria máxima usada (MB): $MEM_USAGE" >> ~/apicore-gm-client/metrics.log
          echo "Uso de disco (MB): $DISK_USAGE" >> ~/apicore-gm-client/metrics.log
       
      # Transferir métricas al entorno de GitHub Actions
      - name: Transfer Metrics Log
        run: |
          scp -o StrictHostKeyChecking=no -i private_key.pem ubuntu@${{ needs.create-infrastructure.outputs.instance_ip }}:~/apicore-gm-client/metrics.log .
        
      # Mostrar métricas en GitHub Actions
      - name: Show Metrics
        run: cat metrics.log

      # Paso 6: Guardar métricas como artefacto
      - name: Upload Metrics Log as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: metrics-log
          path: metrics.log
        
      # Paso 5: Eliminar la clave SSH
      - name: Cleanup SSH Key
        run: rm -f private_key.pem
