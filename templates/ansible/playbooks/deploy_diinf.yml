---
# =====================================
# PLAYBOOK: DESPLIEGUE EN VM DIINF o LOCAL (Ubuntu)
# Descripción: Configura una máquina para desplegar una aplicación
# =====================================
- name: Despliegue en VMs del DIINF o local
  hosts: local
  become: true
  
  vars:
    # CONFIGURACIÓN BÁSICA DEL PROYECTO
    # ----------------------------------
    # Nombre del proyecto
    project_name: "app"
    
    # Directorio raíz del proyecto (se ejecuta desde el directorio raíz)
    project_root: "{{ playbook_dir | dirname | dirname }}"
    
    # Modo de despliegue (false = usar imágenes preconstruidas [RECOMENDADO], true = clonar y construir)
    clone_repos: false

    # Ruta a docker-compose.yml y .env
    docker_compose_path: "{{ project_root }}/docker-compose.yml"
    env_file_path: "{{ project_root }}/.env"
    
    # CONFIGURACIÓN DE SERVICIOS DOCKER
    # ---------------------------------
    # Prefijo común para las imágenes Docker
    docker_registry: ""
    
    # Definición de servicios (Modificar según tus servicios)
    services:
      - name: "core"                      # Nombre interno del servicio
        type: "api"                       # Tipo: api o frontend
        image: "thecariah/api-core-test"  # Imagen Docker del servicio (solo cuando clone_repos = false)
        tag: "latest"                     # Tag de la imagen (solo cuando clone_repos = false)
        port: 3001                        # Puerto en el host
        api_prefix: "api-core"            # Prefijo para la ruta de API en Nginx
      
      - name: "gm"
        type: "api"
        image: "thecariah/api-gm-test"
        tag: "latest"
        port: 3002
        api_prefix: "api-gm"
      
      - name: "client"
        type: "frontend"
        image: "thecariah/client-test"
        tag: "latest"
        port: 3000
        frontend_prefix: "/"
      
      # Para añadir un nuevo servicio, agrega un bloque similar al siguiente:
      # - name: "nuevo_servicio"
      #   type: "api"
      #   image: "usuario/nuevo-servicio"
      #   tag: "latest"
      #   port: 3003
      #   api_prefix: "nuevo-api"

    # Repositorios para clonar (cuando clone_repos = true)
    service_repos:
      - name: "api-core"
        url: "https://github.com/infra-sandbox/api-core-test.git"
        branch: "main"
        service: "core"
      
      - name: "api-gm"
        url: "https://github.com/infra-sandbox/api-gm-test.git"
        branch: "main"
        service: "gm"
      
      - name: "client"
        url: "https://github.com/infra-sandbox/client-test.git"
        branch: "main"
        service: "client"

      # Para añadir un nuevo repositorio, agrega un bloque similar al siguiente:
      # - name: "nuevo_servicio"
      #   url: "https://github.com/usuario/nuevo-servicio.git"
      #   branch: "main"
      #   service: "nuevo_servicio"
    
    # CONFIGURACIÓN DE NGINX
    # ---------------------    
    # Nombre del servidor (dominio de la VM o "_" para local)
    server_name: "felucia.diinf.usach.cl"
    
    # Para SSL (enable_ssl: true -> si hay dominio, enable_ssl: false -> sin dominio / local)
    enable_ssl: true
    admin_email: "tu_email@usach.cl"
    ssl_cert_path: "/etc/letsencrypt/live/{{ server_name }}/fullchain.pem"
    ssl_key_path: "/etc/letsencrypt/live/{{ server_name }}/privkey.pem"
    
  roles:
    - firewall
    - python
    - docker
    - { role: ssl, when: "enable_ssl | bool" }
    - nginx
    - provision

# INSTRUCCIONES:
# 0. REQUISITOS:
#    - Tener Ansible instalado.
#    - Tener Git instalado.
#
# 1. PREPARACIÓN:
#    a) Clona el repositorio donde se encuentra los archivos de despliegue, ejemplo:
#       git clone https://github.com/infra-sandbox/deployment-kit.git
#    
#    b) Navega a la ubicación de despliegue (donde están la carpeta Ansible, docker-compose, etc), ejemplo:
#       cd deployment-kit/deployments/apicore-gm-client
#
#    c) Crea un archivo .env y editalo según tu configuración:
#       touch .env
#       nano .env
#
#    d) Asegurate de tener esta organización de carpetas en tu repositorio:
#       /{directorio_despliegue}/
#          /ansible/
#             /inventory/
#             /playbooks/
#             /roles/
#          /docker-compose.yml
#          /.env
#
# 2. MODO DE DESPLIEGUE:
#    El playbook soporta dos modos de despliegue controlados por la variable 'clone_repos':
#
#    a) clone_repos: false (RECOMENDADO)
#       - Usa imágenes Docker preconstruidas
#       - Requiere que TODOS los servicios tengan 'image' y 'tag' definidos
#       - NO requiere configurar 'service_repos'
#       - Más rápido y más estable para producción
#
#    b) clone_repos: true
#       - Clona los repositorios y construye las imágenes en la instancia
#       - NO definir 'image' ni 'tag' en los servicios
#       - REQUIERE configurar 'service_repos' con los links de los repositorios
#
# 3. AÑADIR SERVICIOS:
#    Agrega bloques como este dentro de services y modifica sus valores:
#
#   services:
#    - name: "nuevo-servicio"          # Nombre único del servicio
#      type: "api"                     # Tipo: api o frontend
#      image: "usuario/nueva-imagen"   # Imagen Docker (solo si clone_repos: false)
#      tag: "latest"                   # Tag de la imagen (solo si clone_repos: false)
#      port: 3003                      # Puerto en el host
#      api_prefix: "nuevo-api"         # Ruta de API en Nginx (solo si es tipo api)
#
#      IMPORTANTE: Para agregar el frontend debes cambiar el tipo a "frontend" y agregar frontend_prefix. 
#                  Si no añades este campo, por defecto se usará "/" para la ruta del frontend.
#                  Pero si tienes más de un frontend, debes definir un prefijo único para cada uno.
#
#    Para cuando clone_repos = true, también debes definir service_repos:
#
#    service_repos:
#    - name: "nuevo-servicio"                     # Nombre de la carpeta donde se clonará
#      url: "https://github.com/tu-org/app.git"   # URL del repositorio
#      branch: "main"                             # Rama a clonar
#      service: "nuevo_servicio"                  # Debe coincidir con el 'name' en la sección 'services'
#
# 4. CONFIGURACIÓN DEL DOMINIO Y SSL:
#    a) Para usar un dominio personalizado, modifica las siguientes variables:
#       - server_name: Dominio de tu servidor (ej: "felucia.diinf.usach.cl")
#       - enable_ssl: true (para habilitar HTTPS)
#       - admin_email: Tu email para certificados SSL
#
#    b) Si no usas dominio, deja server_name como "_" y enable_ssl como false.
#
# 5. EJECUCIÓN DEL PLAYBOOK:
#    Ejecuta el playbook desde el directorio de despliegue, con el siguiente comando:
#
#    sudo ANSIBLE_ROLES_PATH=ansible/roles ansible-playbook ansible/playbooks/deploy_diinf.yml -i ansible/inventory/hosts.ini
#
# NOTA:
# Este playbook está diseñado para ejecutarse desde el directorio de despliegue,
# donde se encuentran los archivos docker-compose.yml y .env (tu debes crearlos). 
# No se utiliza GitHub Actions, sino que todo se ejecuta manualmente con Ansible desde tu máquina.
#
# PARA MAS INFORMACIÓN, INGRESA A LA GUÍA DE USO: 
# https://infra-sandbox.gitbook.io/deployment-kit-docs