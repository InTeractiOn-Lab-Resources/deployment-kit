# ========================================================
# PLAYBOOK: DESPLIEGUE EN EL DIINF o LOCAL
# Descripción: Configura una VM del DIINF con todos los componentes necesarios para desplegar una aplicación 
#              (también sirve para entornos locales con ubuntu)
# ========================================================
---
- name: Despliegue en VMs del DIINF
  hosts: local
  become: true
  
  vars:
    # CONFIGURACIÓN BÁSICA DEL PROYECTO
    # ----------------------------------
    # Nombre del proyecto
    project_name: "mi-aplicacion"
    
    # Directorio raíz del proyecto
    project_root: "/home/usuario/mi-aplicacion"
    
    # Directorio donde está el docker-compose.yml
    compose_path: "/home/usuario/mi-aplicacion/docker"
    
    # Modo de despliegue (false = usar imágenes preconstruidas [RECOMENDADO], true = clonar y construir)
    clone_repos: false
    
    # CONFIGURACIÓN DE SERVICIOS DOCKER
    # ---------------------------------
    # Imágenes Docker (cuando clone_repos = false)
    docker_registry: ""
    service1_image: "usuario/api-core"
    service1_tag: "latest"
    
    service2_image: "usuario/api-gm" 
    service2_tag: "latest"
    
    service3_image: "usuario/client-frontend"
    service3_tag: "latest"

    # Repositorios para clonar (cuando clone_repos = true)
    service1_repo_name: "api-core"
    service1_repo_url: "https://github.com/usuario/api-core.git"
    
    service2_repo_name: "api-gm"
    service2_repo_url: "https://github.com/usuario/api-gm.git"
    
    service3_repo_name: "client-frontend"
    service3_repo_url: "https://github.com/usuario/client-frontend.git"
    
    config_repo_name: "deployment-config"
    config_repo_url: "https://github.com/usuario/deployment-config.git"
    
    # CONFIGURACIÓN DE NGINX
    # ---------------------    
    # Nombre del servidor
    server_name: "felucia.diinf.usach.cl"
    
    # Configuración de puertos y rutas para Nginx
    frontend_port: "3000"
    api1_prefix: "api-core"
    api1_port: "3001"
    api2_prefix: "api-gm"
    api2_port: "3002"

  roles:
    - firewall
    - python
    - docker
    - nginx
    - provision

# INSTRUCCIONES:
# 1. PERSONALIZACIÓN DEL PLAYBOOK:
#    a) Ajusta las variables básicas según tu entorno y estructura del proyecto:
#       - project_name: Nombre de tu proyecto (se usará para nombrar directorios y configuraciones)
#       - project_root: Ruta principal donde se almacenan los archivos de ansible
#       - compose_path: Ruta al directorio con docker-compose.yml
#       - clone_repos: Define si usarás imágenes precompiladas o clonarás repositorios.
#         Si es false, se usarán imágenes Docker Hub precompiladas. Si es true, se clonarán los repositorios.
#
#    b) Define tus servicios:
#       - Si usarás imágenes precompiladas (Docker Hub):
#         Configura los service_image y service_tag.
#         Elimina las variables de clonar repositorios.
#
#       - Si vas a clonar repositorios:
#         Configura los service_repo_name y service_repo_url.
#         Elimina las variables de imágenes precompiladas.
#
#    c) Configura Nginx:
#       - Modifica el server_name con el dominio de la VM
#       - Configura los prefijos y puertos de tus APIs
#
# 2. EJECUCIÓN DEL PLAYBOOK:
#    a) Ejecución básica:
#       ansible-playbook deploy_diinf.yml -K
#
#    b) Especificando variables en línea de comandos:
#       ansible-playbook deploy_diinf.yml -K -e "project_name=mi-app-web clone_repos=true"
#
#    c) Para ver qué haría sin ejecutar cambios:
#       ansible-playbook deploy_diinf.yml -K --check
#
# 3. MANTENIMIENTO:
#    - Para actualizar solo la configuración de Nginx:
#      ansible-playbook deploy_diinf.yml -K --tags nginx
#
#    - Para actualizar las aplicaciones sin reinstalar dependencias:
#      ansible-playbook deploy_diinf.yml -K --tags provision
