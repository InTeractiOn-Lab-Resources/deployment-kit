# =====================================
# ROL: NGINX
# Descripción: Instala y configura Nginx como reverse proxy para los microservicios
# =====================================

# Instalar Nginx
- name: Instalar Nginx
  apt:
    name: nginx
    state: present
    update_cache: true
  become: true

# Asegurar que Nginx esté iniciado
- name: Asegurar que Nginx esté iniciado
  service:
    name: nginx
    state: started
    enabled: true
  become: true

# Configurar Nginx como reverse proxy
- name: Configurar Nginx como reverse proxy
  block:
    - name: Crear archivo de Nginx para redirigir servicios
      copy:
        dest: /etc/nginx/sites-available/{{ project_name | default('app') }}.conf
        content: |
          server {
              listen 80;
              {% if server_name == "localhost" or server_name == "_" %}
              # Configuración para entorno local (sin dominio)
              server_name _;
              {% else %}
              # Configuración para entorno con dominio específico
              server_name {{ server_name }};
              
              # Redirigir HTTP a HTTPS (solo en entornos con dominio)
              {% if enable_ssl | default(false) %}
              return 301 https://$host$request_uri;
              {% endif %}
              {% endif %}

              # Si no hay SSL o estamos en localhost, configurar proxies aquí
              {% if not enable_ssl | default(false) or server_name == "localhost" or server_name == "_" %}
              # Frontend (puerto configurable)
              location / {
                  proxy_pass http://localhost:{{ frontend_port | default('3000') }};
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host $host;
                  proxy_cache_bypass $http_upgrade;
              }

              # API 1 (configurable)
              location /{{ api1_prefix | default('api-core') }}/ {
                  proxy_pass http://localhost:{{ api1_port | default('3001') }}/;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host $host;
                  proxy_cache_bypass $http_upgrade;
              }

              # API 2 (configurable)
              location /{{ api2_prefix | default('api-gm') }}/ {
                  proxy_pass http://localhost:{{ api2_port | default('3002') }}/;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host $host;
                  proxy_cache_bypass $http_upgrade;
              }
              {% endif %}
          }

          {% if enable_ssl | default(false) and server_name != "localhost" and server_name != "_" %}
          # Servidor HTTPS (solo para entornos con dominio y SSL habilitado)
          server {
              listen 443 ssl;
              server_name {{ server_name }};

              # Configuración de SSL
              ssl_certificate {{ ssl_cert_path | default('/etc/ssl/certs/' + project_name + '.crt') }};
              ssl_certificate_key {{ ssl_key_path | default('/etc/ssl/private/' + project_name + '.key') }};
              ssl_protocols TLSv1.2 TLSv1.3;
              ssl_prefer_server_ciphers on;
              ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';

              # Frontend (puerto configurable)
              location / {
                  proxy_pass http://localhost:{{ frontend_port | default('3000') }};
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host $host;
                  proxy_cache_bypass $http_upgrade;
              }

              # API 1 (configurable)
              location /{{ api1_prefix | default('api-core') }}/ {
                  proxy_pass http://localhost:{{ api1_port | default('3001') }}/;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host $host;
                  proxy_cache_bypass $http_upgrade;
              }

              # API 2 (configurable)
              location /{{ api2_prefix | default('api-gm') }}/ {
                  proxy_pass http://localhost:{{ api2_port | default('3002') }}/;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host $host;
                  proxy_cache_bypass $http_upgrade;
              }
          }
          {% endif %}
        owner: root
        group: root
        mode: '0644'
      become: true
      notify: Reiniciar Nginx

    # Habilitar la configuración
    - name: Habilitar configuración en sites-enabled
      file:
        src: /etc/nginx/sites-available/{{ project_name | default('app') }}.conf
        dest: /etc/nginx/sites-enabled/{{ project_name | default('app') }}.conf
        state: link
      become: true
      notify: Reiniciar Nginx

    # Eliminar configuración default (siempre)
    - name: Eliminar configuración default de Nginx
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent
      become: true
      notify: Reiniciar Nginx

    # Verificar la configuración
    - name: Verificar configuración de Nginx
      command: nginx -t
      register: nginx_test
      changed_when: false
      failed_when: nginx_test.rc != 0
      become: true
