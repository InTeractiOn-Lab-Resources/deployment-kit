# ========================================================
# WORKFLOW PARA DESPLIEGUE AUTOMATIZADO EN LA NUBE
# Descripción: Crea infraestructura básica en AWS/DigitalOcean y despliega la aplicación (Terraform + Ansible)
# ========================================================
name: Despliegue automatizado en la nube

on:
  workflow_dispatch:  # Se ejecuta manualmente desde GitHub
    inputs:
      deployment_dir:
        description: 'Directorio principal de despliegue'
        required: true
        default: 'deployments/app' # Cambia esto según tu organización

jobs:
  # TRABAJO 1: CREAR INFRAESTRUCTURA CON TERRAFORM
  create-infrastructure:
    name: Crear Infraestructura
    runs-on: ubuntu-latest

    # Variables de entorno necesarias (eliminar las que no uses)
    env:
      # Variables DigitalOcean
      TF_VAR_do_token: ${{ secrets.DO_TOKEN }}
      TF_VAR_inline_public_key: ${{ secrets.DO_INLINE_PUBLIC_KEY }}

      # Variables AWS
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_VAR_inline_public_key: ${{ secrets.AWS_INLINE_PUBLIC_KEY }}

    # Directorio donde está la configuración de Terraform
    defaults:
      run:
        working-directory: ${{ github.event.inputs.deployment_dir }}/terraform

    # Valores que se pasarán al siguiente job
    outputs:
      instance_ip: ${{ steps.extract.outputs.instance_ip }}

    steps:
      # Paso 1: Obtener el código
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Paso 2: Configurar Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      # Paso 3: Inicializar Terraform
      - name: Terraform Init
        run: terraform init

      # Paso 4: Validar la configuración
      - name: Terraform Validate
        run: terraform validate

      # Paso 5: Crear un plan
      - name: Terraform Plan
        run: terraform plan

      # Paso 6: Aplicar configuración (crear recursos)
      - name: Terraform Apply
        run: terraform apply -auto-approve

      # Paso 7: Obtener IP de la instancia creada
      - name: Extract Public IP
        id: extract
        run: |
          echo "instance_ip=$(terraform output -raw instance_public_ip)" >> $GITHUB_OUTPUT

  # TRABAJO 2: CONFIGURAR LA INSTANCIA CON ANSIBLE
  provision-instance:
    name: Configurar Instancia con Ansible
    needs: create-infrastructure
    runs-on: ubuntu-latest

    env:
      # Usuario SSH para la instancia (Digital Ocean: root, AWS: ubuntu)
      SSH_USER: ubuntu
      # Ruta de roles de Ansible
      ANSIBLE_ROLES_PATH: roles

    steps:
      # Paso 1: Instalar Ansible
      - name: Install Ansible
        run: sudo apt-get update && sudo apt-get install -y ansible

      # Paso 2: Obtener el código
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Paso 3: Preparar clave SSH para conexión
      - name: Write SSH Private Key
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem

      # Paso 4: Ejecutar Ansible para configurar la instancia
      - name: Run Ansible Playbook
        run: |
          cd ${{ github.event.inputs.deployment_dir }}/ansible 
          
          # Crear archivo de variables dinámicamente
          cat > vars.yml << EOF
          ---
          workspace_root: ${{ github.workspace }}
          deployment_dir: ${{ github.event.inputs.deployment_dir }}

          # Usuario remoto para determinar la ruta del proyecto
          remote_user: ${{ env.SSH_USER }}
          
          # Variables de base de datos (Modificar según tus secretos)
          postgres_user: ${{ secrets.POSTGRES_USER }}
          postgres_password: ${{ secrets.POSTGRES_PASSWORD }}
          postgres_db: ${{ secrets.POSTGRES_DB }}
          mongo_username: ${{ secrets.MONGO_USERNAME }}
          mongo_password: ${{ secrets.MONGO_PASSWORD }}
          EOF
          
          # Ejecutar Ansible con el archivo de variables
          ansible-playbook playbooks/deploy_cloud.yml \
            -i "${{ needs.create-infrastructure.outputs.instance_ip }}," \
            --user ${{ env.SSH_USER }} \
            --private-key ${{ github.workspace }}/private_key.pem \
            --ssh-extra-args "-o StrictHostKeyChecking=no" \
            -e @vars.yml
      
      # Paso 5: Eliminar la clave SSH
      - name: Cleanup SSH Key
        run: rm -f private_key.pem

# INSTRUCCIONES:
# 
# 1. PREPARACIÓN DE SECRETOS:
#    Crea estos SECRETOS en tu repositorio (Settings > Secrets > Actions):
#
#    Para AWS:
#    - AWS_ACCESS_KEY_ID: Tu ID de clave de acceso AWS
#    - AWS_SECRET_ACCESS_KEY: Tu clave secreta AWS
#    - AWS_INLINE_PUBLIC_KEY: Contenido de tu archivo id_rsa.pub (clave pública) para AWS
#    - SSH_PRIVATE_KEY: Clave SSH privada para conectarse a la instancia
#
#    Para DigitalOcean:
#    - DO_TOKEN: Token de API de DigitalOcean
#    - DO_INLINE_PUBLIC_KEY: Contenido de tu archivo id_rsa.pub (clave pública) para DigitalOcean
#    - SSH_PRIVATE_KEY: Fingerprint de la clave SSH privada añadida a DigitalOcean
#
#    Variables que necesites para el .env (EJEMPLOS - personaliza según tu aplicación):
#    - POSTGRES_USER: Usuario de PostgreSQL
#    - POSTGRES_PASSWORD: Contraseña de PostgreSQL
#    - POSTGRES_DB: Nombre de la base de datos PostgreSQL
#    - MONGO_USERNAME: Usuario de MongoDB
#    - MONGO_PASSWORD: Contraseña de MongoDB
#
#    * Debes añadirlas en el Job 2: provision-instance (Paso 4) > en el archivo vars.yml.
#
#    * Las variables para el .env se inyectarán en Ansible.
#      Por lo tanto, también deben estar denfinidas en el playbook (playbooks/deploy_cloud.yml).
#
# 2. CONFIGURACIÓN DEL DIRECTORIO DE DESPLIEGUE:
#    a) Modifica el valor por defecto del directorio principal según tu organización:
#       - Edita la sección default de deployment-dir y cambia 'deployments/app' por el directorio que utilizarás.
#
#    b) Organiza tu repositorio con esta estructura para los archivos de despliegue:
#       /{directorio_principal}/    (Ej: deployments/app)
#          /terraform/aws/      - Archivos de Terraform para AWS
#          /terraform/digitalocean/ - Archivos de Terraform para DigitalOcean
#          /ansible/            - Directorio base de Ansible
#             /inventory/
#             /playbooks/
#             /roles/
#          /docker-compose.yml
#
# 3. CONFIGURACIÓN DEL WORKFLOW:
#    a) En el trabajo "create-infrastructure", modifica la variable "working-directory" según la plataforma:
#       - Para AWS: ${{ github.event.inputs.deployment_dir }}/terraform/aws
#       - Para DigitalOcean: ${{ github.event.inputs.deployment_dir }}/terraform/digitalocean
#
#    b) En el trabajo "provision-instance", modifica la variable "SSH_USER" según la plataforma:
#       - Para AWS: SSH_USER: ubuntu
#       - Para DigitalOcean: SSH_USER: root
#
# 4. EJECUCIÓN DEL WORKFLOW:
#    a) Ve a la pestaña "Actions" en GitHub
#    b) Selecciona "Despliegue automatizado en la nube"
#    c) Haz clic en "Run workflow"
#
# 5. RESULTADOS:
#    - En los logs verás la IP pública de tu instancia
#    - Podrás acceder a tu aplicación en: http://IP-DE-INSTANCIA o https://DOMINIO
#    - Para SSH: 
#      * AWS: ssh -i id_rsa.pem ubuntu@IP-DE-INSTANCIA
#      * DigitalOcean: ssh -i id_rsa.pem root@IP-DE-INSTANCIA
#
# 6. SEGURIDAD (IMPORTANTE):
#    - Una vez desplegado, limita los puertos abiertos en el Security Group/Firewall
#      [HTTP (80), HTTPS (443), SSH (22)]
#    - Actualiza regularmente tu instancia con: sudo apt update && sudo apt upgrade
#
# NOTAS IMPORTANTE:
# - Este workflow está diseñado para ser ejecutado manualmente y como configuración inicial.
#   Si se vuelve a ejecutar, se duplicará la instancia y los recursos.
# - Puedes eliminar del workflow las referencias a los secretos que no vayas a utilizar 
#   (por ejemplo, si solo usas DigitalOcean, puedes eliminar las variables de AWS y viceversa).
