# ========================================================
# DOCKER COMPOSE CON IMÁGENES DE DOCKERHUB
# Descripción: Configuración para desplegar servicios usando imágenes predefinidas
# ========================================================
version: "3.8"

# Define los servicios que componen la aplicación
services:
  # SERVICIO 1: FRONTEND
  frontend:
    # Imagen de DockerHub - Reemplaza con tu imagen o una pública
    image: ${FRONTEND_IMAGE:-organization/frontend:latest}
    container_name: ${FRONTEND_CONTAINER:-frontend-app}
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - API_URL=http://api:${API_PORT:-3001}/api
      - AUTH_API_URL=http://auth-api:${AUTH_API_PORT:-3002}/auth
    networks:
      - app-network
    depends_on:
      - api
      - auth-api
    # Descomenta si necesitas volúmenes para persistencia
    # volumes:
    #   - frontend_data:/app/data

  # SERVICIO 2: API PRINCIPAL
  api:
    # Imagen de DockerHub - Reemplaza con tu imagen o una pública
    image: ${API_IMAGE:-organization/api:latest}
    container_name: ${API_CONTAINER:-api-service}
    restart: unless-stopped
    ports:
      - "${API_PORT:-3001}:3001"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - MONGO_URI=mongodb://${MONGO_USER:-admin}:${MONGO_PASSWORD:-adminpassword}@mongodb:27017/${MONGO_DB:-api_db}?authSource=admin
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redispassword}@redis:6379/0
      - AUTH_API_URL=http://auth-api:${AUTH_API_PORT:-3002}/auth
    networks:
      - app-network
    depends_on:
      - mongodb
      - redis

  # SERVICIO 3: API DE AUTENTICACIÓN
  auth-api:
    # Imagen de DockerHub - Reemplaza con tu imagen o una pública
    image: ${AUTH_API_IMAGE:-organization/auth-api:latest}
    container_name: ${AUTH_CONTAINER:-auth-service}
    restart: unless-stopped
    ports:
      - "${AUTH_API_PORT:-3002}:3002"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - POSTGRES_URI=postgresql://${POSTGRES_USER:-auth_user}:${POSTGRES_PASSWORD:-auth_password}@postgres:5432/${POSTGRES_DB:-auth_db}
      - JWT_SECRET=${JWT_SECRET:-your_jwt_secret_key}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redispassword}@redis:6379/1
    networks:
      - app-network
    depends_on:
      - postgres
      - redis

  # BASE DE DATOS: MONGODB
  mongodb:
    image: mongo:${MONGO_VERSION:-6}
    container_name: ${MONGO_CONTAINER:-mongodb}
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-adminpassword}
      MONGO_INITDB_DATABASE: ${MONGO_DB:-api_db}
    volumes:
      - mongodb_data:/data/db
      - ${MONGO_INIT_SCRIPTS:-./init-scripts/mongodb}:/docker-entrypoint-initdb.d:ro
    ports:
      - "${MONGO_PORT:-27017}:27017"
    networks:
      - app-network
    command: ["--auth"]

  # BASE DE DATOS: POSTGRESQL
  postgres:
    image: postgres:${POSTGRES_VERSION:-15-alpine}
    container_name: ${POSTGRES_CONTAINER:-postgres-db}
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-auth_db}
      POSTGRES_USER: ${POSTGRES_USER:-auth_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-auth_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ${POSTGRES_INIT_SCRIPTS:-./init-scripts/postgres}:/docker-entrypoint-initdb.d:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - app-network

  # CACHÉ: REDIS
  redis:
    image: redis:${REDIS_VERSION:-7-alpine}
    container_name: ${REDIS_CONTAINER:-redis-cache}
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redispassword}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - app-network

  # BASE DE DATOS: MYSQL (ejemplo adicional)
  mysql:
    image: mysql:${MYSQL_VERSION:-8}
    container_name: ${MYSQL_CONTAINER:-mysql-db}
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-rootpassword}
      MYSQL_DATABASE: ${MYSQL_DB:-analytics_db}
      MYSQL_USER: ${MYSQL_USER:-analytics_user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-analytics_password}
    volumes:
      - mysql_data:/var/lib/mysql
      - ${MYSQL_INIT_SCRIPTS:-./init-scripts/mysql}:/docker-entrypoint-initdb.d:ro
    ports:
      - "${MYSQL_PORT:-3306}:3306"
    networks:
      - app-network

  # HERRAMIENTA: PHPMYADMIN (para gestión de MySQL)
  phpmyadmin:
    image: phpmyadmin/phpmyadmin:${PHPMYADMIN_VERSION:-latest}
    container_name: ${PHPMYADMIN_CONTAINER:-phpmyadmin}
    restart: unless-stopped
    environment:
      PMA_HOST: mysql
      PMA_PORT: 3306
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-rootpassword}
    ports:
      - "${PHPMYADMIN_PORT:-8080}:80"
    networks:
      - app-network
    depends_on:
      - mysql

  # MONITORIZACIÓN: GRAFANA (opcional)
  grafana:
    image: grafana/grafana:${GRAFANA_VERSION:-latest}
    container_name: ${GRAFANA_CONTAINER:-monitoring-grafana}
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: "false"
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    networks:
      - app-network

# Define las redes utilizadas
networks:
  app-network:
    driver: bridge

# Define los volúmenes para persistencia
volumes:
  mongodb_data:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local
  mysql_data:
    driver: local
  grafana_data:
    driver: local

# INSTRUCCIONES DE USO:
# 1. Crea un archivo .env en el mismo directorio con las variables personalizadas:
#    - FRONTEND_IMAGE=tuorganizacion/frontend:v1.0
#    - API_IMAGE=tuorganizacion/api:v1.0
#    - AUTH_API_IMAGE=tuorganizacion/auth:v1.0
#    - Demás variables para contraseñas y configuración
#
# 2. Para iniciar los servicios:
#    docker-compose up -d
#
# 3. Para detener los servicios:
#    docker-compose down
#
# 4. Para eliminar volúmenes al detener:
#    docker-compose down -v
