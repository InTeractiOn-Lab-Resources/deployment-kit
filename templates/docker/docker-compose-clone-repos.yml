# ========================================================
# DOCKER COMPOSE PARA CONSTRUCCIÓN LOCAL
# Descripción: Configuración para construir y desplegar servicios desde código fuente
# ========================================================
version: "3.8"

# Define los servicios que componen la aplicación
services:
  # SERVICIO 1: FRONTEND
  frontend:
    # Construir desde repositorio local
    build:
      context: ${FRONTEND_PATH:-./frontend}
      dockerfile: ${FRONTEND_DOCKERFILE:-Dockerfile}
      args:
        NODE_ENV: ${NODE_ENV:-production}
    image: frontend-app:local
    container_name: frontend-app
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - API_URL=http://api:${API_PORT:-3001}/api
      - AUTH_API_URL=http://auth-api:${AUTH_API_PORT:-3002}/auth
    networks:
      - app-network
    depends_on:
      - api
      - auth-api
    volumes:
      # Montar código fuente para desarrollo (hot-reload)
      - ${FRONTEND_PATH:-./frontend}/src:/app/src
      - frontend_node_modules:/app/node_modules

  # SERVICIO 2: API PRINCIPAL
  api:
    # Construir desde repositorio local
    build:
      context: ${API_PATH:-./api}
      dockerfile: ${API_DOCKERFILE:-Dockerfile}
      args:
        NODE_ENV: ${NODE_ENV:-production}
    image: api-service:local
    container_name: api-service
    restart: unless-stopped
    ports:
      - "${API_PORT:-3001}:3001"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - MONGO_URI=mongodb://${MONGO_USER:-admin}:${MONGO_PASSWORD:-adminpassword}@mongodb:27017/${MONGO_DB:-api_db}?authSource=admin
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redispassword}@redis:6379/0
      - AUTH_API_URL=http://auth-api:${AUTH_API_PORT:-3002}/auth
    networks:
      - app-network
    depends_on:
      - mongodb
      - redis
    volumes:
      # Montar código fuente para desarrollo (hot-reload)
      - ${API_PATH:-./api}/src:/app/src
      - api_node_modules:/app/node_modules

  # SERVICIO 3: API DE AUTENTICACIÓN
  auth-api:
    # Construir desde repositorio local
    build:
      context: ${AUTH_API_PATH:-./auth-api}
      dockerfile: ${AUTH_DOCKERFILE:-Dockerfile}
      args:
        NODE_ENV: ${NODE_ENV:-production}
    image: auth-service:local
    container_name: auth-service
    restart: unless-stopped
    ports:
      - "${AUTH_API_PORT:-3002}:3002"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - POSTGRES_URI=postgresql://${POSTGRES_USER:-auth_user}:${POSTGRES_PASSWORD:-auth_password}@postgres:5432/${POSTGRES_DB:-auth_db}
      - JWT_SECRET=${JWT_SECRET:-your_jwt_secret_key}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redispassword}@redis:6379/1
    networks:
      - app-network
    depends_on:
      - postgres
      - redis
    volumes:
      # Montar código fuente para desarrollo (hot-reload)
      - ${AUTH_API_PATH:-./auth-api}/src:/app/src
      - auth_node_modules:/app/node_modules

  # BASE DE DATOS: MONGODB
  mongodb:
    image: mongo:${MONGO_VERSION:-6}
    container_name: mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-adminpassword}
      MONGO_INITDB_DATABASE: ${MONGO_DB:-api_db}
    volumes:
      - mongodb_data:/data/db
      - ${MONGO_INIT_SCRIPTS:-./init-scripts/mongodb}:/docker-entrypoint-initdb.d:ro
    ports:
      - "${MONGO_PORT:-27017}:27017"
    networks:
      - app-network
    command: ["--auth"]

  # BASE DE DATOS: POSTGRESQL
  postgres:
    image: postgres:${POSTGRES_VERSION:-15-alpine}
    container_name: postgres-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-auth_db}
      POSTGRES_USER: ${POSTGRES_USER:-auth_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-auth_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ${POSTGRES_INIT_SCRIPTS:-./init-scripts/postgres}:/docker-entrypoint-initdb.d:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - app-network

  # CACHÉ: REDIS
  redis:
    image: redis:${REDIS_VERSION:-7-alpine}
    container_name: redis-cache
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redispassword}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - app-network

  # BASE DE DATOS: ELASTICSEARCH (ejemplo adicional)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTIC_VERSION:-8.6.0}
    container_name: elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "${ELASTIC_PORT:-9200}:9200"
    networks:
      - app-network

  # BÚSQUEDA: KIBANA (para Elasticsearch)
  kibana:
    image: docker.elastic.co/kibana/kibana:${KIBANA_VERSION:-8.6.0}
    container_name: kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "${KIBANA_PORT:-5601}:5601"
    networks:
      - app-network
    depends_on:
      - elasticsearch

  # MENSAJERÍA: RABBITMQ
  rabbitmq:
    image: rabbitmq:${RABBITMQ_VERSION:-3-management}
    container_name: rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-rabbit_user}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-rabbit_password}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - "${RABBITMQ_PORT:-5672}:5672"
      - "${RABBITMQ_MANAGEMENT_PORT:-15672}:15672"
    networks:
      - app-network

  # HERRAMIENTA: ADMINER (alternativa a phpMyAdmin)
  adminer:
    image: adminer:${ADMINER_VERSION:-latest}
    container_name: adminer
    restart: unless-stopped
    ports:
      - "${ADMINER_PORT:-8081}:8080"
    networks:
      - app-network
    depends_on:
      - postgres
      - mysql

  # BASE DE DATOS: MYSQL
  mysql:
    image: mysql:${MYSQL_VERSION:-8}
    container_name: mysql-db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-rootpassword}
      MYSQL_DATABASE: ${MYSQL_DB:-analytics_db}
      MYSQL_USER: ${MYSQL_USER:-analytics_user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-analytics_password}
    volumes:
      - mysql_data:/var/lib/mysql
      - ${MYSQL_INIT_SCRIPTS:-./init-scripts/mysql}:/docker-entrypoint-initdb.d:ro
    ports:
      - "${MYSQL_PORT:-3306}:3306"
    networks:
      - app-network

# Define las redes utilizadas
networks:
  app-network:
    driver: bridge

# Define los volúmenes para persistencia
volumes:
  mongodb_data:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local
  rabbitmq_data:
    driver: local
  mysql_data:
    driver: local
  frontend_node_modules:
  api_node_modules:
  auth_node_modules:

# INSTRUCCIONES DE USO:
# 1. Crea un archivo .env en el mismo directorio con las variables personalizadas:
#    - FRONTEND_PATH=/ruta/a/tu/frontend
#    - API_PATH=/ruta/a/tu/api
#    - AUTH_API_PATH=/ruta/a/tu/auth-api
#
# 2. Para construir e iniciar los servicios:
#    docker-compose up -d --build
#
# 3. Para detener los servicios:
#    docker-compose down
#
# 4. Para reconstruir un servicio específico:
#    docker-compose up -d --build api
